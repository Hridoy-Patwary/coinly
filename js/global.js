const prefersDarkScheme = window.matchMedia('(prefers-color-scheme: dark)').matches;
const savedTheme = localStorage.getItem('theme') || prefersDarkScheme;


const header = document.querySelector('header');
const nav = document.querySelector('header nav');
const themeBtn = document.querySelector('header .theme-btn');
const expandBox = document.querySelector('.expandble-menu-container');
const settingsBtn = document.querySelector('header .settings-btn');




let isDarkTheme = savedTheme && savedTheme == 'false' ? false : true;
let themeMode = isDarkTheme == true ? 'dark' : 'white';
let userPage = window.location.pathname.slice(1) === 'user.html' ? true : false;

const log = (text) => {
    console.log(text);
}



async function cacheImages(imageUrls) {
    // Ensure the browser supports the Cache API
    if ('caches' in window) {
        try {
            // Open a cache named 'image-cache'
            const cache = await caches.open('image-cache');

            // Loop through each image URL
            for (const url of imageUrls) {
                // Check if the image is already cached
                const cachedResponse = await cache.match(url);
                if (!cachedResponse) {
                    // Fetch the image if it's not cached
                    const response = await fetch(url);

                    // Check if the fetch was successful
                    if (response.ok) {
                        // Cache the image
                        await cache.put(url, response);
                        console.log(`Image cached: ${url}`);
                    } else {
                        console.error(`Failed to fetch image: ${url}`);
                    }
                } else {
                    console.log(`Image already cached: ${url}`);
                }
            }
        } catch (error) {
            console.error('Cache operation failed:', error);
        }
    } else {
        console.error('Cache API is not supported in this browser.');
    }
}

// Call the cacheImages function after the page has loaded
// window.addEventListener('load', () => {
//     const imagesToCache = [
//         'https://example.com/image1.jpg',
//         'https://example.com/image2.jpg',
//         'https://example.com/image3.jpg',
//         // Add more image URLs as needed
//     ];

//     cacheImages(imagesToCache);
// });





class GlobalServices {
    // networkCallUrl = 'https://www.coinly.patwarydev.com';
    networkCallUrl = 'http://localhost:4000';

    listener = (event, addTo, runFunction) => {
        addTo.addEventListener(event, runFunction);
    }

    /**
     * @param {typeof} event Pass event type as parameter
     * @param {NodeList} listOfElements Node list to add event on all of the elements
     * @param {Function} runFunction Function to run on event
     * **/
    createListenerForAll = (event, listOfElements, runFunction) => {
        listOfElements.forEach((elm) => {
            elm.addEventListener(event, () => {
                runFunction(elm);
            });
        })
    }

    select = (by, from) => {
        if (from && by) {
            return from.querySelector(by);
        } else return document.querySelector(by);
    }

    removeOldActive = (cls, from) => {
        const oldActive = this.selectAll(`.${cls}`, from);

        oldActive.forEach((ol) => {
            ol.classList.remove(cls);
        })
    }

    /**
     * @param {Array} list List of item to loop thgrough each of them
     * @param {Function} func Give a function as parameter to access items
     * **/
    each = (list, func) => {
        return list.forEach(func);
    }

    /**
     * @param {string} by ClassName to select elements.
     * @param {Element} from Give element reference if you want to select from an element, by default it'll select from document.
     **/
    selectAll = (by, from) => {
        if (from && by) {
            return from.querySelectorAll(by);
        } else return document.querySelectorAll(by);
    }

    /**
     * @param {string} key Local storage needs a key to save the data, and we need that key to access the data.
     * @param {string} value Value needs to be a string, if it's json then convert it into string.
     * @param {boolean} stringify Use true or false to convert value into string or you can convert by yourself
     **/

    saveToLocal = (key, value, stringify) => {
        if (stringify) {
            localStorage.setItem(key, JSON.stringify(value))
        } else {
            localStorage.setItem(key, value);
        }
    }

    /**
     * @param {string} key Local storage needs a key to save the data
     * @param {boolean} parse Use true or false to convert data into JSON
     **/
    getFromLocal = (key, parse) => {
        if (parse) {
            return JSON.parse(localStorage.getItem(key));
        } else {
            return localStorage.getItem(key);
        }
    }

    /**
     * @param {string} url Request url
     * @param {JSON} data Request data (in json)
    **/
    postRequest = (url, data) => {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open('POST', url, true);
            xhr.onload = function () {
                if (this.status === 200) {
                    // const json = JSON.parse(this.responseText);
                    resolve(this.responseText);
                } else {
                    reject('error');
                }
            }

            xhr.setRequestHeader("Content-type", "application/json");
            xhr.send(JSON.stringify(data));
        })
    }

    /**
     * @param {string} url Request url
    **/
    getRequest = (url) => {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.onload = function () {
                if (this.status == 200) {
                    resolve(this.responseText);
                } else {
                    reject('error');
                }
            }
            xhr.send();
        })
    }
}

class SVGIconsCode {
    getRightArrow = (size, rotate) => {
        const svgHTML = `<svg width="${size}" height="${size}" viewBox="5 5 14 14" fill="none"><path d="M9.293 18.707a1 1 0 0 1 0-1.414L14.586 12 9.293 6.707a1 1 0 0 1 1.414-1.414l6 6a1 1 0 0 1 0 1.414l-6 6a1 1 0 0 1-1.414 0z"/></svg>`;
        if (rotate) {
            return `<span class='rotate-icon'>${svgHTML}</span>`;
        } else return svgHTML;
    }

    getCustomCategoryIconsArray = () => {
        const icon = `<svg width="43px" height="53px" viewBox="0 0 43 53"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-1006.000000, -258.000000)"><g transform="translate(1006.000000, 258.000000)"><polygon stroke="#fff" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" points="15.1108 10.5549 15.0068 11.2229 15.0878 11.9359 14.9958 12.6489 15.1238 13.3599 15.1358 14.0719 14.9838 14.7819 15.1278 15.4919 15.0808 16.2019 15.1388 16.9129 15.0408 17.6229 15.1398 18.3329 15.0378 19.0439 15.0328 19.7549 14.9968 20.4679 15.0028 21.1799 14.9838 21.8939 15.0548 22.6099 15.0298 23.3249 15.0658 24.0389 15.0228 24.7529 15.0418 25.4659 15.0428 26.1789 15.0238 26.8919 14.9838 27.6049 15.0538 28.3179 15.1148 29.0319 15.1148 29.7469 14.9908 30.4639 15.0748 31.1799 15.1018 31.8939 15.1118 32.6089 15.0018 33.3229 15.1038 34.0379 15.0038 34.7539 15.1168 35.4709 14.9908 36.1869 15.1008 36.9019 15.0528 37.6169 15.0188 38.3279 15.0898 39.0389 15.1448 39.7519 15.0448 40.4679 15.1448 41.1859 15.0828 41.9019 15.0828 42.6159 15.1048 43.3319 15.1378 44.0509 14.9988 44.7679 15.0078 45.4859 15.1298 46.2059 15.0668 46.9249 15.0788 47.6429 15.0378 48.3599 15.1158 49.0799 15.1288 49.8029 15.0588 50.5259 15.0768 51.2379 15.8008 51.2469 16.5398 51.2909 17.2778 51.2059 18.0148 51.2989 18.7548 51.2529 19.4928 51.2239 20.2318 51.1799 20.9678 51.1799 21.7088 51.3219 22.4508 51.2939 23.1948 51.2379 23.9608 51.2719 23.9568 50.4959 23.9518 49.7399 23.9398 48.9839 23.9848 48.2299 23.8678 47.4759 23.8898 46.7189 23.8998 45.9609 23.9058 45.1999 23.9868 44.4869 24.6848 44.4679 25.4298 44.3879 26.1738 44.5049 26.9178 44.3799 27.6648 44.4569 28.4128 44.4809 29.1628 44.4939 29.8968 44.4569 29.9358 45.1929 29.8548 45.9499 29.8848 46.7049 29.9498 47.4599 29.9828 48.2129 29.8798 48.9709 29.9438 49.7289 29.9278 50.4899 29.8988 51.2649 30.6478 51.2749 31.3848 51.3249 32.1208 51.2479 32.8558 51.1989 33.5938 51.2569 34.3308 51.2559 35.0678 51.2709 35.8028 51.2199 36.5418 51.3009 37.2818 51.2289 38.0238 51.2549 38.7518 51.2349 38.6968 50.5359 38.7478 49.8229 38.8348 49.1099 38.7148 48.3989 38.7548 47.6869 38.8168 46.9769 38.8038 46.2659 38.7918 45.5559 38.7068 44.8459 38.7768 44.1359 38.7318 43.4259 38.7428 42.7149 38.8468 42.0039 38.7398 41.2909 38.7838 40.5779 38.8068 39.8649 38.6928 39.1489 38.7838 38.4339 38.7188 37.7199 38.6958 37.0059 38.8208 36.2929 38.7548 35.5799 38.7528 34.8669 38.7708 34.1539 38.6868 33.4409 38.7508 32.7269 38.7868 32.0119 38.8248 31.2949 38.7508 30.5789 38.7858 29.8649 38.7738 29.1499 38.8308 28.4359 38.7418 27.7209 38.8398 27.0049 38.8088 26.2879 38.7058 25.5719 38.7618 24.8569 38.7678 24.1409 38.8118 23.4309 38.6888 22.7199 38.7858 22.0069 38.7858 21.2909 38.8198 20.5729 38.6878 19.8569 38.7178 19.1429 38.7118 18.4269 38.7648 17.7079 38.8358 16.9909 38.7868 16.2729 38.7938 15.5529 38.7898 14.8339 38.8048 14.1159 38.6948 13.3989 38.8258 12.6789 38.7858 11.9559 38.7618 11.2329 38.7398 10.5339 38.0508 10.5519 37.3348 10.5769 36.6178 10.5559 35.8998 10.4839 35.1828 10.5509 34.4658 10.4919 33.7498 10.4709 33.0338 10.5379 32.3178 10.4849 31.5998 10.5249 30.8818 10.5689 30.1638 10.5319 29.4468 10.4609 28.7298 10.5649 28.0178 10.4779 27.3048 10.5889 26.5898 10.5729 25.8728 10.5119 25.1528 10.5289 24.4358 10.4349 23.7188 10.4639 23.0018 10.4429 22.2808 10.5299 21.5618 10.5019 20.8428 10.4599 20.1208 10.4429 19.4008 10.4579 18.6808 10.4289 17.9618 10.5159 17.2398 10.4379 16.5158 10.5379 15.7908 10.5139"/><path d="M5.8672,19.7419 L5.1542,19.6639 L4.4412,19.7649 L3.7252,19.6919 L3.0352,19.7439 L2.9762,20.4309 L2.9992,21.1449 L3.0192,21.8599 L3.0712,22.5749 L3.0452,23.2919 L3.0422,24.0069 L3.0472,24.7219 L3.0472,25.4359 L3.0282,26.1489 L3.0642,26.8629 L3.0522,27.5759 L2.9502,28.2909 L2.9532,29.0059 L2.9672,29.7219 L3.0252,30.4389 L3.0002,31.1559 L2.9822,31.8709 L3.0522,32.5869 L2.9952,33.3009 L3.0032,34.0179 L3.0212,34.7349 L2.9672,35.4519 L2.9722,36.1689 L3.0192,36.8849 L2.9602,37.6019 L3.0602,38.3129 L2.9912,39.0239 L2.9732,39.7379 L2.9622,40.4549 L3.0472,41.1749 L3.0572,41.8899 L3.0312,42.6059 L3.0592,43.3229 L2.9732,44.0429 L3.0402,44.7609 L3.0022,45.4789 L3.0622,46.1999 L3.0082,46.9199 L3.0712,47.6379 L3.0672,48.3569 L2.9642,49.0779 L3.0212,49.7999 L2.9902,50.5259 L2.9912,51.2679 L3.7142,51.1879 L4.4182,51.2389 L5.1222,51.2379 L5.8242,51.1929 L6.5292,51.2399 L7.2372,51.2729 L7.9452,51.2799 L8.6962,51.2939 L8.7152,50.5819 L8.7022,49.9149 L8.6092,49.2489 L8.7062,48.5799 L8.6762,47.9079 L8.6182,47.2359 L8.6842,46.5929 L9.3362,46.6119 L10.0192,46.5379 L10.7042,46.5559 L11.3892,46.6219 L12.0782,46.5699 L12.7792,46.5489 L12.7622,47.2319 L12.8272,47.8979 L12.7762,48.5639 L12.8162,49.2339 L12.8012,49.9049 L12.7112,50.5779 L12.7682,51.2459 L13.5302,51.2669 L14.2972,51.2049 L15.0652,51.2579 L15.0822,19.7179 L14.3772,19.6629 L13.6692,19.6979 L12.9592,19.7229 L12.2522,19.7139 L11.5462,19.6819 L10.8382,19.6829 L10.1272,19.6589 L9.4172,19.6589 L8.7082,19.7439 L7.9962,19.7349 L7.2862,19.7009 L6.5762,19.6559 L5.8672,19.7419 Z M10.4382,25.6169 L10.4712,24.9619 L10.4712,24.3009 L10.4952,23.6379 L10.4952,22.9749 L10.4182,22.2909 L11.1902,22.2929 L11.9452,22.3279 L12.7022,22.3719 L13.4762,22.2929 L13.4052,22.9679 L13.5072,23.6299 L13.4332,24.2909 L13.4962,24.9559 L13.4602,25.6209 L12.7062,25.5639 L11.9502,25.5999 L11.1932,25.6249 L10.4382,25.6169 Z M6.2032,25.6169 L6.2362,24.9619 L6.2362,24.3009 L6.2582,23.6379 L6.2592,22.9749 L6.1832,22.2909 L6.9542,22.2929 L7.7092,22.3279 L8.4672,22.3719 L9.2402,22.2929 L9.1702,22.9679 L9.2722,23.6299 L9.1982,24.2909 L9.2612,24.9559 L9.2252,25.6209 L8.4712,25.5639 L7.7152,25.5999 L6.9582,25.6249 L6.2032,25.6169 Z M10.4382,30.1379 L10.4712,29.4839 L10.4712,28.8219 L10.4952,28.1599 L10.4952,27.4949 L10.4182,26.8109 L11.1902,26.8149 L11.9452,26.8479 L12.7022,26.8919 L13.4762,26.8119 L13.4052,27.4889 L13.5072,28.1499 L13.4332,28.8129 L13.4962,29.4769 L13.4602,30.1409 L12.7062,30.0859 L11.9502,30.1219 L11.1932,30.1459 L10.4382,30.1379 Z M6.2032,30.1379 L6.2362,29.4839 L6.2362,28.8219 L6.2582,28.1599 L6.2592,27.4949 L6.1832,26.8109 L6.9542,26.8149 L7.7092,26.8479 L8.4672,26.8919 L9.2402,26.8119 L9.1702,27.4889 L9.2722,28.1499 L9.1982,28.8129 L9.2612,29.4769 L9.2252,30.1409 L8.4712,30.0859 L7.7152,30.1219 L6.9582,30.1459 L6.2032,30.1379 Z M10.4382,34.6589 L10.4712,34.0039 L10.4712,33.3429 L10.4952,32.6799 L10.4952,32.0159 L10.4182,31.3319 L11.1902,31.3349 L11.9452,31.3689 L12.7022,31.4139 L13.4762,31.3339 L13.4052,32.0099 L13.5072,32.6709 L13.4332,33.3329 L13.4962,33.9979 L13.4602,34.6619 L12.7062,34.6059 L11.9502,34.6409 L11.1932,34.6669 L10.4382,34.6589 Z M6.2032,34.6589 L6.2362,34.0039 L6.2362,33.3429 L6.2582,32.6799 L6.2592,32.0159 L6.1832,31.3319 L6.9542,31.3349 L7.7092,31.3689 L8.4672,31.4139 L9.2402,31.3339 L9.1702,32.0099 L9.2722,32.6709 L9.1982,33.3329 L9.2612,33.9979 L9.2252,34.6619 L8.4712,34.6059 L7.7152,34.6409 L6.9582,34.6669 L6.2032,34.6589 Z M10.4382,39.1789 L10.4712,38.5249 L10.4712,37.8629 L10.4952,37.2009 L10.4952,36.5369 L10.4182,35.8529 L11.1902,35.8559 L11.9452,35.8899 L12.7022,35.9349 L13.4762,35.8549 L13.4052,36.5309 L13.5072,37.1919 L13.4332,37.8539 L13.4962,38.5189 L13.4602,39.1829 L12.7062,39.1269 L11.9502,39.1629 L11.1932,39.1869 L10.4382,39.1789 Z M6.2032,39.1789 L6.2362,38.5249 L6.2362,37.8629 L6.2582,37.2009 L6.2592,36.5369 L6.1832,35.8529 L6.9542,35.8559 L7.7092,35.8899 L8.4672,35.9349 L9.2402,35.8549 L9.1702,36.5309 L9.2722,37.1919 L9.1982,37.8539 L9.2612,38.5189 L9.2252,39.1829 L8.4712,39.1269 L7.7152,39.1629 L6.9582,39.1869 L6.2032,39.1789 Z" fill="#fff"/><polyline stroke="#fff" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" points="17.3423 10.1184 17.3033 9.4054 17.3303 8.6874 17.3353 7.9694 17.2853 7.2494 17.2973 6.5214 18.0143 6.5174 18.7233 6.5504 19.4333 6.5064 20.1453 6.5494 20.8563 6.4914 21.5673 6.5384 22.2783 6.5464 22.9883 6.5674 23.6943 6.5044 24.4003 6.5404 25.1083 6.5324 25.8193 6.5074 26.5313 6.5274 27.2423 6.5354 27.9523 6.5434 28.6633 6.4924 29.3773 6.5454 30.0893 6.5414 30.8023 6.5334 31.5173 6.4914 32.2303 6.4954 32.9443 6.5264 33.6553 6.4994 34.3713 6.5404 35.0883 6.5324 35.8073 6.5224 36.5053 6.5504 36.5323 7.2424 36.5423 7.9594 36.5613 8.6784 36.5563 9.3984 36.5073 10.1184"/><g transform="translate(0.000000, 0.577600)"><g transform="translate(0.000000, 50.000000)"><mask fill="white"><use xlink:href="#path-1"/></mask><g/><polyline stroke="#fff" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" mask="url(#mask-2)" points="0.262195122 0.6238 1.01207317 0.7128 1.76195122 0.7088 2.51078049 0.7348 3.25856098 0.6998 4.00739024 0.6858 4.75412195 0.7058 5.50190244 0.5948 6.24863415 0.6118 6.99536585 0.6268 7.74314634 0.7498 8.49092683 0.6848 9.2397561 0.6898 9.98858537 0.7408 10.7384634 0.7098 11.490439 0.7088 12.2424146 0.6898 12.995439 0.6878 13.7463659 0.6298 14.4983415 0.7248 15.2482195 0.6568 15.9980976 0.6158 16.7479756 0.7168 17.4978537 0.6238 18.2487805 0.6278 18.9997073 0.6358 19.7527317 0.6028 20.5068049 0.6238 21.2598293 0.7378 22.0118049 0.6608 22.7627317 0.6918 23.5147073 0.6468 24.2666829 0.6668 25.0197073 0.6728 25.7748293 0.6468 26.5278537 0.7028 27.2798293 0.6558 28.0328537 0.6308 28.7806341 0.7188 29.5284146 0.6268 30.2793415 0.6048 31.0323659 0.7118 31.7874878 0.6348 32.5405122 0.6568 33.2924878 0.6048 34.0455122 0.6178 34.8027317 0.6438 35.5568049 0.7028 36.3119268 0.7148 37.0691463 0.7368 37.8253171 0.7158 38.5814878 0.6138 39.335561 0.7498 40.0938293 0.6688 40.8531463 0.7248 41.614561 0.7348"/></g><polyline stroke="#fff" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" points="25.2905 0.6726 25.2915 1.4246 25.2925 2.1756 25.2795 2.9266 25.2905 3.6806 25.2825 4.4366 25.2855 5.1936 25.2795 5.9516"/></g><polyline stroke="#fff" stroke-width="0.5" stroke-linecap="round" stroke-linejoin="round" points="29.0659 3.6633 29.0579 4.3773 29.0599 5.0933 29.0609 5.8113 29.0649 6.5293"/><g transform="translate(18.000000, 15.577600)" fill="#fff"><path d="M2.1196,19.8572 L1.3906,19.9282 L0.6546,19.8892 L0.6726,20.5862 L0.6256,21.2762 L0.6636,21.9642 L0.6686,22.6522 L0.6166,23.3362 L0.6286,24.0202 L0.6486,24.7192 L1.3966,24.6912 L2.1326,24.7322 L2.8656,24.6832 L3.5986,24.6812 L4.3266,24.7222 L5.0466,24.6952 L5.0626,24.0152 L5.0366,23.3252 L5.0456,22.6372 L5.0976,21.9492 L5.0986,21.2662 L5.0766,20.5812 L5.0796,19.8702 L4.3206,19.9062 L3.5856,19.8632 L2.8516,19.8842 L2.1196,19.8572 Z M2.1346,20.3572 L2.8666,20.3842 L3.5566,20.3622 L4.2916,20.4052 C4.3016,20.4052 4.3106,20.4062 4.3206,20.4062 C4.3286,20.4062 4.3366,20.4052 4.3446,20.4052 L4.5776,20.3942 L4.5766,20.5972 L4.5986,21.2662 L4.5986,21.9122 L4.5456,22.6302 L4.5366,23.3442 L4.5626,24.0042 L4.5576,24.2152 L4.3546,24.2232 L3.5976,24.1812 L2.8316,24.1842 L2.1286,24.2322 L1.3786,24.1922 L1.1346,24.2012 L1.1286,24.0112 L1.1156,23.3732 L1.1686,22.6492 L1.1626,21.9372 L1.1266,21.2782 L1.1726,20.5732 L1.1686,20.4172 L1.3646,20.4272 C1.3726,20.4282 1.3826,20.4282 1.3906,20.4282 C1.4076,20.4282 1.4236,20.4272 1.4396,20.4262 L2.1346,20.3572 L2.1346,20.3572 Z"/><path d="M2.852,13.3123 L2.12,13.3603 L1.391,13.3613 L0.652,13.3153 L0.674,14.0163 L0.64,14.7073 L0.636,15.3953 L0.676,16.0823 L0.691,16.7663 L0.65,17.4503 L0.684,18.1123 L1.397,18.1273 L2.132,18.1013 L2.866,18.1133 L3.598,18.1233 L4.327,18.1473 L5.088,18.1693 L5.042,17.4463 L5.083,16.7553 L5.034,16.0673 L5.032,15.3803 L5.073,14.6963 L5.042,14.0113 L5.035,13.3493 L4.321,13.3163 L3.585,13.3703 L2.852,13.3123 Z M2.849,13.8133 L3.546,13.8683 C3.56,13.8693 3.572,13.8703 3.585,13.8703 C3.598,13.8703 3.609,13.8693 3.622,13.8683 L4.328,13.8173 L4.54,13.8273 L4.543,14.0343 L4.572,14.6933 L4.532,15.3813 L4.535,16.1033 L4.582,16.7593 L4.543,17.4163 C4.542,17.4373 4.542,17.4573 4.543,17.4773 L4.554,17.6543 L4.343,17.6483 L3.605,17.6233 L2.873,17.6133 L2.115,17.6023 L1.408,17.6273 L1.159,17.6223 L1.151,17.4523 L1.19,16.7553 L1.175,16.0533 L1.136,15.3973 L1.139,14.7313 L1.174,14.0003 L1.169,13.8483 L1.392,13.8613 L2.152,13.8593 L2.849,13.8133 L2.849,13.8133 Z" /><path d="M2.1196,6.7215 L1.3906,6.7945 L0.6376,6.7305 L0.6836,7.4465 L0.6736,8.1375 L0.6696,8.8255 L0.7046,9.5125 L0.6276,10.1965 L0.6766,10.8815 L0.6336,11.5965 L1.3966,11.5965 L2.1326,11.5375 L2.8656,11.5875 L3.5986,11.5665 L4.3266,11.5435 L5.0736,11.5845 L5.0476,10.8765 L5.0216,10.1855 L5.0336,9.4975 L5.0436,8.8105 L5.0686,8.1265 L5.1016,7.4415 L5.0256,6.7895 L4.3206,6.7295 L3.5856,6.7645 L2.8516,6.8015 L2.1196,6.7215 Z M2.1176,7.2245 L2.7976,7.2985 C2.8156,7.3005 2.8336,7.3015 2.8516,7.3015 C2.8606,7.3015 2.8686,7.3015 2.8776,7.3015 L3.6086,7.2635 L4.3116,7.2305 L4.5766,7.2525 L4.6006,7.4585 L4.5686,8.1085 L4.5436,8.8025 L4.5336,9.4895 L4.5226,10.2045 L4.5486,10.8945 L4.5546,11.0565 L4.3106,11.0435 L3.5836,11.0665 L2.8996,11.0885 L2.1666,11.0385 C2.1546,11.0375 2.1436,11.0375 2.1326,11.0375 C2.1196,11.0375 2.1056,11.0375 2.0926,11.0385 L1.3966,11.0965 L1.1636,11.0965 L1.1756,10.9105 C1.1766,10.8895 1.1766,10.8675 1.1756,10.8455 L1.1296,10.2065 L1.2016,9.5685 C1.2046,9.5415 1.2046,9.5145 1.2036,9.4875 L1.1696,8.8285 L1.1736,8.1435 L1.1826,7.4145 L1.1736,7.2785 L1.3486,7.2935 C1.3626,7.2945 1.3766,7.2945 1.3906,7.2945 C1.4076,7.2945 1.4246,7.2945 1.4406,7.2925 L2.1176,7.2245 L2.1176,7.2245 Z" /><path d="M2.1196,0.1467 L1.3906,0.2087 L0.6716,0.1967 L0.6316,0.8767 L0.6806,1.5667 L0.6806,2.2557 L0.6316,2.9427 L0.6676,3.6257 L0.6826,4.3117 L0.6906,4.9647 L1.3966,5.0327 L2.1326,5.0447 L2.8656,5.0147 L3.5986,4.9577 L4.3266,5.0007 L5.0596,5.0007 L5.0866,4.3067 L5.0276,3.6157 L5.0776,2.9277 L5.0566,2.2407 L5.0336,1.5567 L5.0816,0.8717 L5.0766,0.1657 L4.3206,0.1847 L3.5856,0.2217 L2.8516,0.1937 L2.1196,0.1467 Z M2.1246,0.6477 L2.8326,0.6937 L3.6106,0.7207 L4.3336,0.6847 L4.5816,0.6777 L4.5826,0.8367 L4.5346,1.5217 C4.5336,1.5387 4.5336,1.5567 4.5336,1.5737 L4.5566,2.2557 L4.5776,2.9177 L4.5286,3.5797 C4.5266,3.6057 4.5266,3.6317 4.5296,3.6587 L4.5856,4.3177 L4.5786,4.5017 L4.3566,4.5017 L3.6286,4.4587 C3.6186,4.4577 3.6086,4.4577 3.5986,4.4577 C3.5846,4.4577 3.5726,4.4577 3.5586,4.4587 L2.8456,4.5157 L2.1406,4.5447 L1.4446,4.5357 L1.1846,4.5107 L1.1826,4.3007 L1.1666,3.6007 L1.1326,2.9467 L1.1806,2.2557 L1.1796,1.5317 L1.1336,0.8737 L1.1426,0.7057 L1.3826,0.7087 L1.3906,0.7087 C1.4056,0.7087 1.4196,0.7087 1.4336,0.7077 L2.1246,0.6477 L2.1246,0.6477 Z" /><path d="M9.7402,19.8777 L9.0072,19.9297 L8.2742,19.8917 L7.5462,19.9017 L6.8222,19.9017 L6.8192,20.5857 L6.8092,21.2757 L6.8452,21.9647 L6.8602,22.6517 L6.8472,23.3357 L6.8462,24.0207 L6.8172,24.7057 L7.5522,24.7087 L8.2872,24.6997 L9.0212,24.6597 L9.7532,24.7377 L10.4812,24.7487 L11.1922,24.6857 L11.2482,24.0157 L11.2592,23.3257 L11.2292,22.6367 L11.1722,21.9497 L11.2162,21.2657 L11.2172,20.5817 L11.2112,19.8967 L10.4762,19.9147 L9.7402,19.8777 Z M9.7462,20.3787 L10.4882,20.4147 L10.7152,20.4087 L10.7172,20.5807 L10.7172,21.2337 L10.6732,21.9177 C10.6712,21.9417 10.6722,21.9667 10.6742,21.9917 L10.7302,22.6587 L10.7592,23.3167 L10.7492,23.9747 L10.7292,24.2247 L10.4622,24.2477 L9.8062,24.2407 L9.0732,24.1627 C9.0562,24.1607 9.0382,24.1597 9.0202,24.1597 C9.0112,24.1597 9.0032,24.1607 8.9932,24.1607 L8.2812,24.1997 L7.5542,24.2087 L7.3392,24.2077 L7.3462,24.0207 L7.3472,23.3447 L7.3602,22.6417 L7.3442,21.9387 L7.3092,21.2837 L7.3192,20.5877 L7.3202,20.4017 L7.5522,20.4017 L8.2482,20.3917 L8.9812,20.4297 C8.9902,20.4297 8.9982,20.4297 9.0072,20.4297 C9.0182,20.4297 9.0312,20.4297 9.0422,20.4287 L9.7462,20.3787 L9.7462,20.3787 Z" /><path d="M9.7402,13.2874 L9.0072,13.3634 L8.2742,13.3674 L7.5462,13.3624 L6.8182,13.3284 L6.8512,14.0164 L6.8372,14.7064 L6.8252,15.3944 L6.8242,16.0824 L6.8612,16.7664 L6.8612,17.4504 L6.8332,18.1184 L7.5522,18.1234 L8.2872,18.1754 L9.0212,18.1414 L9.7532,18.1564 L10.4812,18.1724 L11.2192,18.1444 L11.2142,17.4454 L11.2052,16.7554 L11.1652,16.0674 L11.2432,15.3804 L11.2542,14.6964 L11.1832,14.0114 L11.2382,13.2974 L10.4762,13.3174 L9.7402,13.2874 Z M9.7562,13.7884 L10.4892,13.8174 L10.6972,13.8114 L10.6852,13.9734 C10.6822,14.0024 10.6832,14.0334 10.6862,14.0624 L10.7532,14.7194 L10.7462,15.3234 L10.6692,16.0114 C10.6652,16.0394 10.6652,16.0674 10.6662,16.0964 L10.7052,16.7624 L10.7142,17.4494 L10.7162,17.6644 L10.4932,17.6734 L9.7632,17.6564 L8.9972,17.6414 L8.2932,17.6754 L7.5552,17.6234 L7.3542,17.6224 L7.3612,17.4504 L7.3602,16.7394 L7.3242,16.0834 L7.3252,15.4034 L7.3372,14.7174 L7.3512,13.9924 L7.3442,13.8534 L7.5432,13.8624 L8.2772,13.8674 L9.0582,13.8604 L9.7562,13.7884 L9.7562,13.7884 Z" /><path d="M7.5459,6.7215 L6.8289,6.7695 L6.7739,7.4465 L6.8179,8.1375 L6.8269,8.8255 L6.8169,9.5125 L6.8539,10.1965 L6.7899,10.8815 L6.7969,11.5865 L7.5519,11.5365 L8.2869,11.5185 L9.0209,11.5325 L9.7529,11.5415 L10.4819,11.6025 L11.2349,11.5915 L11.1989,10.8765 L11.2509,10.1855 L11.2159,9.4975 L11.2319,8.8105 L11.2479,8.1265 L11.2229,7.4415 L11.2309,6.7355 L10.4759,6.7305 L9.7399,6.7395 L9.0069,6.7615 L8.2749,6.7825 L7.5459,6.7215 Z M7.5419,7.2225 L8.2329,7.2805 C8.2469,7.2815 8.2609,7.2825 8.2749,7.2825 C8.2789,7.2825 8.2839,7.2825 8.2889,7.2825 L9.0219,7.2615 L9.7469,7.2395 L10.4729,7.2305 L10.7259,7.2315 L10.7229,7.4605 L10.7489,8.1145 L10.7319,8.7995 L10.7169,9.5225 L10.7499,10.1795 L10.7009,10.8385 C10.6989,10.8595 10.6989,10.8805 10.6999,10.9015 L10.7099,11.1015 L10.5239,11.1045 L9.7589,11.0425 L9.0299,11.0325 L8.2759,11.0195 L7.5189,11.0375 L7.2919,11.0525 L7.2899,10.9015 L7.3509,10.2425 C7.3539,10.2185 7.3539,10.1945 7.3529,10.1695 L7.3169,9.5195 L7.3269,8.8185 L7.3169,8.1055 L7.2749,7.4505 L7.2929,7.2395 L7.5419,7.2225 L7.5419,7.2225 Z" /><path d="M9.7402,0.1394 L9.0072,0.1644 L8.2742,0.1694 L7.5462,0.1424 L6.7882,0.1564 L6.7682,0.8764 L6.7732,1.5674 L6.8402,2.2554 L6.7922,2.9424 L6.8182,3.6264 L6.7882,4.3114 L6.8372,4.9734 L7.5522,5.0314 L8.2872,5.0044 L9.0212,4.9564 L9.7532,5.0184 L10.4812,5.0224 L11.1982,4.9834 L11.1812,4.3064 L11.1642,3.6164 L11.1772,2.9284 L11.1872,2.2404 L11.2482,1.5564 L11.2452,0.8714 L11.2032,0.1944 L10.4762,0.1704 L9.7402,0.1394 Z M9.7382,0.6394 L10.4592,0.6704 L10.7332,0.6794 L10.7452,0.8734 L10.7502,1.5124 L10.6872,2.2334 L10.6772,2.9174 L10.6642,3.6284 L10.6812,4.3194 L10.6862,4.5114 L10.4842,4.5224 L9.7952,4.5204 L9.0632,4.4584 C9.0492,4.4564 9.0342,4.4564 9.0202,4.4564 C9.0102,4.4564 8.9982,4.4564 8.9882,4.4574 L8.2692,4.5054 L7.5632,4.5304 L7.3042,4.5094 L7.2892,4.3034 L7.3182,3.6074 L7.2932,2.9514 L7.3392,2.2904 C7.3412,2.2624 7.3412,2.2344 7.3382,2.2064 L7.2732,1.5634 L7.2682,0.8904 L7.2752,0.6474 L7.5282,0.6424 L8.2772,0.6694 L9.0242,0.6644 L9.7382,0.6394 L9.7382,0.6394 Z" /><path d="M16.6308,19.8621 L15.8958,19.9121 L15.1618,19.9021 L14.4288,19.9101 L13.7008,19.9121 L12.9728,19.8981 L12.9458,20.5861 L12.9678,21.2761 L13.0118,21.9651 L12.9398,22.6521 L12.9468,23.3361 L12.9688,24.0201 L12.9748,24.7021 L13.7068,24.6921 L14.4428,24.6901 L15.1758,24.6971 L15.9078,24.7131 L16.6368,24.6771 L17.3588,24.6971 L17.4008,24.0161 L17.3748,23.3251 L17.3258,22.6371 L17.3878,21.9491 L17.3918,21.2661 L17.3478,20.5811 L17.3418,19.9221 L16.6308,19.8621 Z M16.6268,20.3631 L16.8468,20.3821 L16.8488,20.6131 L16.8918,21.2631 L16.8898,21.9041 L16.8278,22.5921 C16.8258,22.6181 16.8258,22.6451 16.8268,22.6721 L16.8748,23.3441 L16.9018,23.9851 L16.8888,24.1851 L16.6128,24.1781 L15.9188,24.2131 L15.1808,24.1971 L14.4408,24.1901 L13.6998,24.1921 L13.4698,24.1951 L13.4688,24.0051 L13.4468,23.3301 L13.4398,22.6751 L13.5088,22.0171 C13.5118,21.9891 13.5118,21.9611 13.5108,21.9331 L13.4678,21.2601 L13.4448,20.6061 L13.4528,20.4071 L13.7018,20.4121 L14.4348,20.4101 L15.1548,20.4021 L15.9298,20.4111 L16.6268,20.3631 L16.6268,20.3631 Z" /><path d="M13.7007,13.3006 L12.9827,13.3386 L12.9487,14.0166 L12.9567,14.7066 L13.0107,15.3946 L12.9477,16.0826 L12.9657,16.7656 L13.0137,17.4506 L12.9667,18.1406 L13.7067,18.1676 L14.4427,18.1116 L15.1757,18.1716 L15.9087,18.1436 L16.6367,18.0966 L17.3797,18.1496 L17.3517,17.4466 L17.3507,16.7556 L17.3577,16.0676 L17.3727,15.3806 L17.3387,14.6966 L17.3547,14.0116 L17.3377,13.3566 L16.6307,13.3316 L15.8957,13.3656 L15.1617,13.3236 L14.4297,13.3546 L13.7007,13.3006 Z M13.6957,13.8016 L14.3927,13.8526 C14.4047,13.8536 14.4167,13.8546 14.4297,13.8546 C14.4357,13.8546 14.4437,13.8546 14.4507,13.8536 L15.1337,13.8226 L15.8677,13.8646 C15.8767,13.8646 15.8867,13.8656 15.8957,13.8656 C15.9037,13.8656 15.9107,13.8656 15.9187,13.8646 L16.6127,13.8306 L16.8507,13.8396 L16.8557,13.9996 L16.8387,14.7216 L16.8737,15.3686 L16.8577,16.0616 L16.8507,16.7566 L16.8527,17.4656 L16.8577,17.6116 L16.6727,17.5976 C16.6607,17.5966 16.6487,17.5966 16.6367,17.5966 C16.6257,17.5966 16.6157,17.5966 16.6047,17.5976 L15.8887,17.6436 L15.1867,17.6706 L14.4827,17.6126 C14.4697,17.6116 14.4557,17.6116 14.4427,17.6116 C14.4297,17.6116 14.4167,17.6116 14.4037,17.6126 L13.6967,17.6676 L13.5007,17.6596 L13.5127,17.4846 C13.5137,17.4616 13.5137,17.4386 13.5127,17.4166 L13.4657,16.7526 L13.4487,16.0986 L13.5087,15.4406 C13.5107,15.4126 13.5107,15.3836 13.5087,15.3566 L13.4567,14.7006 L13.4487,14.0416 L13.4597,13.8136 L13.6957,13.8016 L13.6957,13.8016 Z" /><path d="M16.6308,6.7385 L15.8958,6.7985 L15.1618,6.7525 L14.4288,6.8035 L13.7008,6.7865 L12.9978,6.7845 L12.9998,7.4465 L12.9748,8.1365 L12.9588,8.8255 L13.0098,9.5125 L12.9978,10.1965 L13.0148,10.8815 L12.9638,11.5745 L13.7068,11.5685 L14.4428,11.6035 L15.1758,11.6135 L15.9078,11.5485 L16.6368,11.5995 L17.3468,11.5465 L17.3978,10.8765 L17.3408,10.1855 L17.4018,9.4975 L17.3738,8.8105 L17.3268,8.1265 L17.3848,7.4415 L17.3688,6.7545 L16.6308,6.7385 Z M16.6458,7.2385 L16.8808,7.2435 L16.8848,7.4265 L16.8288,8.0845 C16.8258,8.1095 16.8258,8.1355 16.8278,8.1605 L16.8748,8.8305 L16.9008,9.4855 L16.8428,10.1425 C16.8408,10.1705 16.8408,10.1985 16.8428,10.2265 L16.8968,10.8785 L16.8808,11.0795 L16.6348,11.0975 L15.9438,11.0495 C15.9318,11.0485 15.9198,11.0485 15.9078,11.0485 C15.8928,11.0485 15.8788,11.0485 15.8628,11.0505 L15.1568,11.1135 L14.4668,11.1045 L13.7018,11.0685 L13.5008,11.0705 L13.5148,10.8685 L13.4978,10.2055 L13.5088,9.4755 L13.4588,8.8365 L13.4748,8.1555 L13.4998,7.4455 L13.4998,7.2855 L13.6888,7.2855 L14.4638,7.3015 L15.1638,7.2535 L15.8638,7.2975 C15.8748,7.2975 15.8848,7.2985 15.8958,7.2985 C15.9088,7.2985 15.9218,7.2975 15.9358,7.2965 L16.6458,7.2385 L16.6458,7.2385 Z" /><path d="M16.6308,0.1511 L15.8958,0.1771 L15.1618,0.2001 L14.4288,0.1691 L13.7008,0.2091 L12.9778,0.1941 L12.9458,0.8771 L12.9858,1.5671 L12.9428,2.2551 L12.9308,2.9431 L12.9458,3.6261 L12.9498,4.3111 L12.9698,4.9981 L13.7068,4.9851 L14.4428,4.9611 L15.1758,5.0381 L15.9078,4.9741 L16.6368,4.9831 L17.3548,4.9841 L17.3678,4.3061 L17.4038,3.6161 L17.4138,2.9281 L17.3478,2.2401 L17.3998,1.5571 L17.3388,0.8721 L17.3758,0.1771 L16.6308,0.1511 Z M16.6308,0.6511 L16.8488,0.6591 L16.8388,0.8451 C16.8378,0.8691 16.8388,0.8931 16.8398,0.9161 L16.8978,1.5601 L16.8498,2.2031 C16.8468,2.2311 16.8478,2.2601 16.8498,2.2881 L16.9138,2.9481 L16.9048,3.5901 L16.8678,4.2971 L16.8648,4.4831 L16.6428,4.4831 L15.8638,4.4761 L15.1798,4.5361 L14.4938,4.4641 C14.4768,4.4621 14.4598,4.4611 14.4428,4.4611 C14.4368,4.4611 14.4318,4.4621 14.4258,4.4621 L13.6978,4.4851 L13.4548,4.4891 L13.4498,4.3091 L13.4458,3.6151 L13.4308,2.9521 L13.4428,2.2861 L13.4848,1.5981 C13.4858,1.5781 13.4858,1.5581 13.4848,1.5381 L13.4468,0.8741 L13.4548,0.7031 L13.7278,0.7081 L14.4078,0.6691 L15.1778,0.7001 L15.9128,0.6761 L16.6308,0.6511 L16.6308,0.6511 Z" /></g></g></g></g></svg>`;
        const arr = [icon, `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="33" viewBox="0 0 32 33" fill="none"><path opacity="0.2" d="M13.9995 26.0713C13.4747 26.5974 12.8513 27.0148 12.1649 27.2996C11.4785 27.5844 10.7427 27.731 9.99954 27.731C9.25642 27.731 8.5206 27.5844 7.83421 27.2996C7.14783 27.0148 6.52437 26.5974 5.99954 26.0713C5.47344 25.5465 5.05604 24.923 4.77124 24.2366C4.48644 23.5502 4.33984 22.8144 4.33984 22.0713C4.33984 21.3282 4.48644 20.5923 4.77124 19.906C5.05604 19.2196 5.47344 18.5961 5.99954 18.0713L11.9995 12.0713L19.9995 20.0713L13.9995 26.0713Z" fill="#fff"/><path d="M18.0002 6.06567L6.00595 18.06C3.7946 20.2713 3.79282 23.8548 6.00197 26.064C8.21112 28.2731 11.7946 28.2713 14.006 26.06L26.0003 14.0657C28.2116 11.8544 28.2134 8.27084 26.0043 6.0617C23.7951 3.85255 20.2116 3.85433 18.0002 6.06567Z" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 12.0713L20 20.0713" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M20.0127 14.0838L23.0627 11.1338" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`, `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" fill="#fff"><path d="m16 2c-7.7 0-14 6.3-14 14s6.3 14 14 14 14-6.3 14-14-6.3-14-14-14zm0 6c2.9 0 5 1.5 5 4 0 1.2-.9 2.1-2 3-1 .8-1.4 1.5-1.5 3h-3c0-2.6 1.1-3.4 2.4-4.7.9-.9.8-1.7.1-2.3-1.3-1-3.2-.1-4.6.5l-.8-2.4c1.4-.8 3.4-1.1 4.4-1.1zm0 12c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z"/></svg>`];

        return arr;
    }
}


const checkAndRunAnimBtns = () => {
    const animBtns = document.querySelectorAll('.anim-btn-outer span');
    animBtns.forEach((btn) => btn.addEventListener('click', (e) => runAnimBtn(e)))
}

const runAnimBtn = (e) => {
    const target = e.target;
    const parent = target.parentElement;

    if (parent.classList.contains('theme-in-nav')) {
        parent.classList.toggle('active');
    } else parent.classList.toggle('active');
}

// ======================= theme code ======================= //
const getRgbCode = () => {
    return isDarkTheme ? '28, 28, 28' : '242, 242, 246';
}

const updateTheme = (userPage) => {
    document.documentElement.setAttribute('theme', themeMode);
    localStorage.setItem('theme', themeMode == 'dark' ? 'true' : 'false');


    if (userPage === true) {
        setThemeColors('yellow');
    } else if (userPage === false) setThemeColors(themeMode, getRgbCode());
}

function setThemeColors(theme, colorCode) {
    const themeColorMetaTag = document.querySelector('meta[name="theme-color"]');

    if (theme === 'dark') {
        themeColorMetaTag.setAttribute('content', 'rgb(28, 28, 28)');
    } else if (theme === 'yellow') {
        themeColorMetaTag.setAttribute('content', 'rgb(244, 188, 65)');
    } else if (theme === 'custom' && colorCode) {
        themeColorMetaTag.setAttribute('content', `${colorCode}`);
    } else {
        themeColorMetaTag.setAttribute('content', 'rgb(242, 242, 246)');
    }
}


const handleWindowScroll = () => {
    if (expandBox.classList.contains('active')) {
        handleSettingsBtnClick();
    }
    changeThemeAccordingToScroll();
}

const changeThemeAccordingToScroll = () => {
    const scrollY = window.scrollY;
    const z = scrollY / 15;
    const prNum = isDarkTheme ? 246 : 242;
    const y = parseInt(z.toFixed(0)) + prNum;
    const x = y > 255 ? 255 : y;
    const calcValue = y - 246;
    const calculatedVlu = (28 - (calcValue * 2.3)).toFixed(0);
    const rgbNum = calculatedVlu < 0 ? 0 : calculatedVlu;

    const rgbForWhite = `rgb(${x}, ${x}, ${x})`;
    const rgbForDark = `rgb(${rgbNum}, ${rgbNum}, ${rgbNum})`;
    const shadowNum = isDarkTheme ? '0, 0, 0' : '67, 67, 67';
    const rgb = isDarkTheme ? rgbForDark : rgbForWhite;

    let navBG = isDarkTheme ? '79 79 79' : '255 255 255';
    let gradientBG = getRgbCode();
    let shadowOpacity = 0, reverseShadowOpacity = 0;

    const bg = `linear-gradient(to top, ${rgb}, rgb(${gradientBG}))`;

    const scrollValue = parseInt((scrollY / 14).toFixed(0)) * 20;
    const valueLength = scrollValue.toString().length;
    const percentage = (200 - scrollValue) / 2;


    if (valueLength === 1) {
        shadowOpacity = '00' + scrollValue;
        reverseShadowOpacity = 200 - scrollValue;
    } else if (valueLength === 2) {
        shadowOpacity = '0' + scrollValue;
        reverseShadowOpacity = 200 - scrollValue;
    } else {
        shadowOpacity = scrollValue;
        const tmp = 200 - scrollValue;
        reverseShadowOpacity = tmp < 100 ? '0' + tmp : tmp;
    }


    shadowOpacity = shadowOpacity > 200 ? 200 : shadowOpacity;
    reverseShadowOpacity = 200 - scrollValue < 0 ? 0 : reverseShadowOpacity;

    if (header) {
        header.style.background = bg;
        header.style.boxShadow = `3px 3px 10px rgba(${shadowNum}, 0.${shadowOpacity})`;
    }

    if (expandBox) {
        expandBox.style.boxShadow = `3px 3px 10px rgba(${shadowNum}, 0.${reverseShadowOpacity})`;
        expandBox.style.background = `rgb(${navBG} / ${percentage < 0 ? 0 : percentage}%)`;
    }
}

const changeThemeIcon = () => {
    if (themeBtn) {
        if (isDarkTheme) {
            themeBtn.classList.add('active');
        } else {
            themeBtn.classList.remove('active');
        }
    }
}

const changeTheme = (x) => {
    isDarkTheme = !isDarkTheme;
    themeMode = isDarkTheme === true ? 'dark' : 'white';
    updateTheme(x);
    changeThemeIcon();
    changeThemeAccordingToScroll();
}

const renderThemeBtnAnimation = () => {
    updateTheme()
    setThemeColors(themeMode, getRgbCode())
}

// ========================= default function calls ========================= //

// set early so no page flashes / CSS is made aware
if (userPage) {
    updateTheme(true);
}

renderThemeBtnAnimation();

window.onload = () => {
    const themeToggle = document.querySelector('#theme-toggle');

    if (themeToggle) {
        themeToggle.addEventListener('click', () => changeTheme(userPage));
    }
}
checkAndRunAnimBtns();